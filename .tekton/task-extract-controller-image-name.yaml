---
# This Task is used to extract the value of the controller's image name from the bundle's container image by inspecting the labels with skopeo.
# The task accepts as input parameter the label that contains the controller's image name in the bundle's image.
# Internally, the task will read the `graph.yaml` file to extract the bundle's image name and proceed to inspect it with skopeo.
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: extract-controller-image-name
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Build
    tekton.dev/tags: FBC
    tekton.dev/displayName: "extract-controller-image-name"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: |-
    This task retrieves the controller's fully qualified name from the bundle's image by introspecting the labels in the bundle for the
    parametrized label that contains the controller's image.
  params:
  - name: CONTROLLER_LABEL
    description: Label key defined in the bundle's container file that holds the controller's fully qualified image name
    default: controller
    type: string
  - name: CONTEXT
    default: .
    description: Path to the directory to use as context.
    type: string
  - name: SOURCE_ARTIFACT
    description: The Trusted Artifact URI pointing to the artifact with
      the application source code.
    type: string
    default: ""
  results:
  - name: CONTROLLER_IMAGE
    description: Operator's controller's image name extracted from the label in the bundle image
  volumes:
  - name: workdir
    emptyDir: {}
  stepTemplate:
    volumeMounts:
    - mountPath: /var/workdir
      name: workdir
  steps:
  - name: use-trusted-artifact
    image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:601e0999ae062e5ee666538d651af7893a75e415b7952c85caa8a4452501029a
    args:
      - use
      - $(params.SOURCE_ARTIFACT)=/var/workdir/source
  - name: skopeo-inspect
    image: quay.io/konflux-ci/appstudio-utils@sha256:0fb4d1ee1f1526e85e00b4e41e72451d3fb9531ebf71291118be307c870633a0
    workingDir: /var/workdir
    computeResources:
      limits:
        memory: 512Mi
      requests:
        memory: 256Mi
        cpu: 250m
    securityContext:
      runAsNonRoot: true
      runAsUser: 65532
    env:
    - name: CONTROLLER_LABEL
      value: $(params.CONTROLLER_LABEL)
    - name: CONTEXT
      value: $(params.CONTEXT)
    script: |
      set -ex
      SOURCE_CODE_DIR=source

      bundle_image=$(yq e '.image |select (.)' $SOURCE_CODE_DIR/$CONTEXT/graph.yaml)
      if [[ -z "$bundle_image" ]]; then
        echo "No bundle image found in "$SOURCE_CODE_DIR/$CONTEXT/graph.yaml
        exit 1
      fi
      # Capture the controller' image name from the bundle's image defined as a label with key in CONTROLLER_LABEL
      skopeo inspect --format '{{ index .Labels "'$CONTROLLER_LABEL'" }}' docker://$bundle_image | tee $(results.CONTROLLER_IMAGE.path)
